!function(){angular.module("ngMaterial.components.templates",[]).run(["$templateCache",function($templateCache){$templateCache.put("date-picker/date-picker-dialog.html",'<md-dialog class="mdc-date-picker" style="max-width: 90%; max-height: 90%">\r\n    <!-- Date picker -->\r\n    <div md-theme="{{mdTheme}}">\r\n      <!-- Current day of week -->\r\n      <md-toolbar hide-sm class="md-hue-2 mdc-date-picker__current-day-of-week">\r\n        <span>{{ selected.date | date: \'EEEE\' }}</span>\r\n      </md-toolbar>\r\n\r\n      <!-- Current date -->\r\n      <md-toolbar hide-sm class="mdc-date-picker__current-date">\r\n        <span>{{ selected.date | date : \'MMMM\' }}</span>\r\n        <strong>{{ selected.date | date: \'dd\' }}</strong>\r\n        <a ng-click="displayYearSelection()">{{ selected.date | date: \'yyyy\' }}</a>\r\n      </md-toolbar>\r\n      <md-toolbar hide show-sm class="mdc-date-picker__current-date">\r\n            <strong>{{ selected.date | date: \'dd\' }}</strong>\r\n            <a ng-click="displayYearSelection()">{{ selected.date | date: \'MMMM yyyy\' }}</a>\r\n      </md-toolbar>\r\n\r\n      <!-- Calendar -->\r\n      <div class="mdc-date-picker__calendar" ng-if="!yearSelection">\r\n        <div class="mdc-date-picker__nav">\r\n          <md-button class="md-fab md-primary" aria-label="Previous month" ng-click="previousMonth()">\r\n            <i class="mdi mdi-chevron-left"></i>\r\n          </md-button>\r\n\r\n          <span>{{ activeDate | date: \'MMMM yyyy\' }}</span>\r\n\r\n          <md-button class="md-fab md-primary" aria-label="Next month" ng-click="nextMonth()">\r\n            <i class="mdi mdi-chevron-right"></i>\r\n          </md-button>\r\n        </div>\r\n\r\n        <div class="mdc-date-picker__days-of-week">\r\n          <span ng-repeat="day in daysOfWeek">{{ day }}</span>\r\n        </div>\r\n\r\n        <div class="mdc-date-picker__days">\r\n                    <span class="mdc-date-picker__day mdc-date-picker__day--is-empty"\r\n                          ng-repeat="x in emptyFirstDays">&nbsp;</span><!--\r\n\r\n                 --><div class="mdc-date-picker__day"\r\n                         ng-class="{ \'mdc-date-picker__day--is-selected\': day.selected,\r\n                                     \'mdc-date-picker__day--is-today\': day.today }"\r\n                         ng-repeat="day in days">\r\n          <a ng-click="select(day)">{{ day.date ? (day.date | date: \'dd\') : \'\' }}</a>\r\n        </div><!--\r\n\r\n                 --><span class="mdc-date-picker__day mdc-date-picker__day--is-empty"\r\n                          ng-repeat="x in emptyLastDays">&nbsp;</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Year selection -->\r\n      <div class="mdc-date-picker__year-selector" ng-show="yearSelection">\r\n        <a class="mdc-date-picker__year"\r\n           ng-class="{ \'mdc-date-picker__year--is-active\': year == (activeDate | date:\'yyyy\') }"\r\n           ng-repeat="year in years"\r\n           ng-click="selectYear(year)"\r\n           ng-if="yearSelection">\r\n          <span>{{year}}</span>\r\n        </a>\r\n      </div>\r\n\r\n      <!-- Actions -->\r\n      <div class="md-actions mdc-date-picker__actions" layout="row" layout-align="end end">\r\n        <md-button class="md-primary" ng-click="select(today)">Hoje</md-button>\r\n        <md-button class="md-primary" ng-click="cancel()">Cancelar</md-button>\r\n        <md-button class="md-primary" ng-click="closePicker()">Ok</md-button>\r\n      </div>\r\n    </div>\r\n</md-dialog>\r\n'),$templateCache.put("date-picker/date-picker-input.html",'<md-input-container ng-click="openPicker($event)">\r\n  <label>{{label}}</label>\r\n  <input type="text" ng-model="selected.model" ng-disabled="true" ng-click="openPicker($event)">\r\n</md-input-container>\r\n')}])}(),function(){"use strict";angular.module("ngMaterial.components.datePicker",["ngMaterial"]).controller("mdcDatePickerController",["$scope","$timeout","$mdDialog","$filter","$document","$locale","date","locale","mdTheme",function($scope,$timeout,$mdDialog,$filter,$document,$locale,date,locale,mdTheme){function checkLocale(locale){return locale?locale:(null!==navigator.language?navigator.language:navigator.browserLanguage).split("_")[0].split("-")[0]||"en"}function generateCalendar(){var days=[],firstDayOfMonth=new Date($scope.activeDate.getFullYear(),$scope.activeDate.getMonth(),1),lastDayOfMonth=new Date($scope.activeDate.getFullYear(),$scope.activeDate.getMonth()+1,0),maxDays=lastDayOfMonth.getUTCDate();$scope.emptyFirstDays=[];for(var i=firstDayOfMonth.getDay();i>0;i--)$scope.emptyFirstDays.push({});var each=firstDayOfMonth,today=new Date;today.setHours(0,0,0,0),$scope.today={},$scope.today.date=today;for(var j=0;maxDays>j;j++){var date={};date.date=each,date.selected=each.getTime()===$scope.selected.date.getTime(),date.today=each.getTime()===today.getTime(),days.push(date),each=new Date(each),each=new Date(each.setDate(each.getDate()+1))}$scope.emptyLastDays=[];for(var k=lastDayOfMonth.getDay()+1;7>k;k++)$scope.emptyLastDays.push({});$scope.days=days}$scope.myLocale=$locale,$scope.model=date,$scope.mdTheme=mdTheme?mdTheme:"default";$scope.activeDate=new Date,this.build=function(locale){angular.isDefined($scope.model)?($scope.selected={model:$scope.model,date:$scope.model},$scope.activeDate=$scope.model):($scope.selected={model:void 0,date:new Date},$scope.activeDate=new Date),$scope.days=[],$scope.daysOfWeek=[$scope.myLocale.DATETIME_FORMATS.SHORTDAY[0],$scope.myLocale.DATETIME_FORMATS.SHORTDAY[1],$scope.myLocale.DATETIME_FORMATS.SHORTDAY[2],$scope.myLocale.DATETIME_FORMATS.SHORTDAY[3],$scope.myLocale.DATETIME_FORMATS.SHORTDAY[4],$scope.myLocale.DATETIME_FORMATS.SHORTDAY[5],$scope.myLocale.DATETIME_FORMATS.SHORTDAY[6]],$scope.years=[];for(var y=$scope.activeDate.getFullYear()-50;y<=$scope.activeDate.getFullYear()+50;y++)$scope.years.push(y);generateCalendar()},this.build(checkLocale(locale)),$scope.previousMonth=function(){$scope.activeDate=new Date($scope.activeDate.getTime()),$scope.activeDate=new Date($scope.activeDate.setMonth($scope.activeDate.getMonth()-1)),generateCalendar()},$scope.nextMonth=function(){$scope.activeDate=new Date($scope.activeDate.getTime()),$scope.activeDate=new Date($scope.activeDate.setMonth($scope.activeDate.getMonth()+1)),generateCalendar()},$scope.select=function(day){$scope.selected={model:day.date,date:day.date},$scope.model=day.date,$scope.activeDate=day.date,generateCalendar()},$scope.selectYear=function(year){$scope.yearSelection=!1,$scope.selected.model=$scope.selected.date.setFullYear(year),$scope.selected.date=$scope.selected.date.setFullYear(year),$scope.model=$scope.model,$scope.activeDate.setFullYear(year),generateCalendar()},$scope.displayYearSelection=function(){var calendarHeight=$document[0].getElementsByClassName("mdc-date-picker__calendar")[0].offsetHeight,yearSelectorElement=$document[0].getElementsByClassName("mdc-date-picker__year-selector")[0];yearSelectorElement.style.height=calendarHeight+"px",$scope.yearSelection=!0,$timeout(function(){var activeYearElement=$document[0].getElementsByClassName("mdc-date-picker__year--is-active")[0];yearSelectorElement.scrollTop=yearSelectorElement.scrollTop+activeYearElement.offsetTop-yearSelectorElement.offsetHeight/2+activeYearElement.offsetHeight/2})},$scope.cancel=function(){$mdDialog.hide()},$scope.closePicker=function(){$mdDialog.hide($scope.selected)}}]).controller("mdcDatePickerInputController",function($scope,$attrs,$timeout,$filter,$mdDialog){$scope.selected=angular.isDefined($scope.model)?{model:$scope.model,date:$scope.model}:{model:void 0,date:new Date};var dataDateFormat="mediumDate";angular.isDefined($attrs.dataDateFormat)&&(dataDateFormat=$attrs.dataDateFormat),$scope.openPicker=function(ev){$scope.yearSelection=!1,$mdDialog.show({targetEvent:ev,templateUrl:"date-picker/date-picker-dialog.html",controller:"mdcDatePickerController",locals:{date:$scope.selected.date,locale:$attrs.locale,mdTheme:$attrs.dialogMdTheme}}).then(function(selected){selected&&($scope.selected.model=$filter("date")(selected.date,dataDateFormat),$scope.selected.date=selected.date,$scope.model=selected.model)})}}).directive("mdcDatePicker",function(){return{restrict:"AE",controller:"mdcDatePickerInputController",scope:{model:"=",label:"@"},templateUrl:"date-picker/date-picker-input.html"}})}(),function(){"use strict";angular.module("ngMaterial.components",["ngMaterial","ngMaterial.components.templates","ngMaterial.components.datePicker"])}();
//# sourceMappingURL=data:application/json;base64,